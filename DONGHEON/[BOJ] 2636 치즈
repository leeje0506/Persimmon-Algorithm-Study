package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class boj_2636_치즈 {
	static int r ,c , cnt;
	static int[][] map;
	static int[] dr = {1, -1, 0, 0};
	static int[] dc = {0, 0, -1, 1};
	static boolean[][] tfmap;
	
	static class node{
		int r;
		int c;
		public node(int r, int c) {
			this.r = r;			
			this.c = c;
		}
	}

	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine() , " ");
		
		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());
		
		map = new int[r][c];
		tfmap = new boolean[r][c];
		
		cnt = 0;
		for (int i = 0; i < r; i++) {
			st = new StringTokenizer(br.readLine() , " ");
			for (int j = 0; j < c; j++) {
				int tem = Integer.parseInt(st.nextToken());
				
				if(tem == 1) {
					cnt++;
					map[i][j] = tem;
				}
			}
		}
		
		Queue<node> que = new LinkedList<>();
		que.add(new node(0,0));
		tfmap[0][0] = true;
		
		int time = 0;
		int result = 0;
		
		while(cnt != 0) {
			time++;
			Queue<node> temQ = new LinkedList<>();
			
			while (!que.isEmpty()) {
				
				node temNode = que.poll();
				int temR = temNode.r;
				int temC = temNode.c;
				
				for (int i = 0; i < 4; i++) {
					int nR = temR + dr[i];
					int nC = temC + dc[i];
					
					if(0 <= nR && r > nR && 0 <= nC && c > nC && !tfmap[nR][nC]) {
						tfmap[nR][nC] = true;
						if(map[nR][nC] == 1) {
							temQ.add(new node(nR, nC));
						}else {
							que.add(new node(nR, nC));
						}
					}
					
				}
				
			}
			
			cnt -= temQ.size();
			
			if(cnt != 0) {
				while(!temQ.isEmpty()) {

					node temN = temQ.poll();
					map[temN.r][temN.c] = 0;
					que.add(temN);
					
				}
			}else {
				result = temQ.size();
			}
			
			
		}
		
		System.out.println(time);
		System.out.println(result);
		
		
	}



}
