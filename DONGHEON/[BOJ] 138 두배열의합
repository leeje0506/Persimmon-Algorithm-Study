package BOJ;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.StringTokenizer;

public class boj_138_두배열의합 {

	    static long T;
	    static int N, M;
	    static long[] A, B;

	    public static void main(String[] args) throws Exception {
	        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

	        T = Long.parseLong(br.readLine());

	        N = Integer.parseInt(br.readLine());
	        A = new long[N];
	        StringTokenizer st = new StringTokenizer(br.readLine());
	        for (int i = 0; i < N; i++) {
	            A[i] = Long.parseLong(st.nextToken());
	        }

	        M = Integer.parseInt(br.readLine());
	        B = new long[M];
	        st = new StringTokenizer(br.readLine());
	        for (int i = 0; i < M; i++) {
	            B[i] = Long.parseLong(st.nextToken());
	        }

	        List<Long> listA = new ArrayList<>();
	        List<Long> listB = new ArrayList<>();

	        for (int i = 0; i < N; i++) {
	            long sum = A[i];
	            listA.add(sum);
	            for (int j = i + 1; j < N; j++) {
	                sum += A[j];
	                listA.add(sum);
	            }
	        }
	        for (int i = 0; i < M; i++) {
	            long sum = 0;
	            for (int j = i; j < M; j++) {
	                sum += B[j];
	                listB.add(sum);
	            }
	        }

	        Collections.sort(listA);
	        Collections.sort(listB, Comparator.reverseOrder());

	        long result = 0;
	        int pointA = 0;
	        int pointB = 0;
	        while (true) {
	            long currentA = listA.get(pointA);
	            long target = T - currentA;
	            if (listB.get(pointB) == target) {
	                long cntA = 0;
	                long cntB = 0;
	                while (pointA < listA.size() && listA.get(pointA) == currentA){
	                    cntA++;
	                    pointA++;
	                }
	                while (pointB < listB.size() && listB.get(pointB) == target){
	                    cntB++;
	                    pointB++;
	                }
	                result += cntA * cntB;
	            }
	            else if (listB.get(pointB) > target) {
	                pointB++;
	            }
	            else {
	                pointA++;
	            }

	            if (pointA == listA.size() || pointB == listB.size()) {
	                break;
	            }
	        }
	    }
	}
