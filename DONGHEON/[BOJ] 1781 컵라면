// 내가 푼 코드
package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class boj_1781_컵라면 {
	
	static class pair1 implements Comparable<pair1>{
		int deadLine;
		int cup;
		
		public pair1(int deadLine, int cup){
			this.deadLine = deadLine;
			this.cup = cup;
		}

		@Override
		public int compareTo(pair1 o) {
			if (this.cup - o.cup== 0) {
				return o.deadLine - this.deadLine;
			}
			return o.cup - this.cup;

		}
	}
	
	static class pair2 implements Comparable<pair2>{
		int deadLine;
		int cup;
		
		public pair2(int deadLine, int cup){
			this.deadLine = deadLine;
			this.cup = cup;
		}

		@Override
		public int compareTo(pair2 o) {
			if (this.deadLine - o.deadLine == 0) {
				return o.cup - this.cup;
			}
			return this.deadLine - o.deadLine;
		}
		
	}

	

	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int N = Integer.parseInt(br.readLine());

		PriorityQueue<pair1> pq1 = new PriorityQueue<pair1>();
		
		int maxDead = 0;
		for(int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			int A = Integer.parseInt(st.nextToken());
			maxDead = Math.max(maxDead, A);
			int B = Integer.parseInt(st.nextToken());
			
			pq1.add(new pair1(A, B));
			
		}
		
		int result = 0;
		int dead = 0;
		
		PriorityQueue<pair2> pq2 = new PriorityQueue<pair2>();
		
		for(int i = 0 ; i < maxDead; i ++) {
			pair1 tem = pq1.poll();
			pq2.add(new pair2(tem.deadLine, tem.cup));
		}
		
		while(!pq2.isEmpty()) {
			
			pair2 p = pq2.poll();
			
			if(dead < p.deadLine) {
				
				result += p.cup;
				dead++;
			}else {
				if(!pq1.isEmpty()) {
					pair1 tem = pq1.poll();
					pq2.add(new pair2(tem.deadLine, tem.cup));
				}
			}

		}
		
		System.out.println(result);
		
	}
}
////////////////////////////////////////// 

package BOJ;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class boj_1781_컵라면2 {
	
	static class Homework implements Comparable<Homework> {
	    int no;
	    int deadline;
	    int noodle;

	    public Homework(int no, int deadline, int noodle) {
	        this.no = no;
	        this.deadline = deadline;
	        this.noodle = noodle;
	    }
		
	    @Override
	    public int compareTo(Homework o) {
	        if(this.deadline == o.deadline) return o.noodle - this.noodle;
	        return this.deadline - o.deadline;
	    }
	}

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        int result = 0;
        List<Homework> homeworkList = new ArrayList();
        PriorityQueue<Integer> noodles = new PriorityQueue<>();

        for(int i = 0; i<N; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int deadline = Integer.parseInt(st.nextToken());
            int noodle = Integer.parseInt(st.nextToken());
            homeworkList.add(new Homework(i+1, deadline, noodle));
        }

        Collections.sort(homeworkList);

        for(int i = 0; i<N; i++) {
            Homework hw = homeworkList.get(i);
            if(noodles.size() < hw.deadline) noodles.add(hw.noodle);
            else if(noodles.size() == hw.deadline) {
                if(noodles.peek() < hw.noodle) {
                    noodles.poll();
                    noodles.add(hw.noodle);
                }
            }
        }
		
        while(!noodles.isEmpty()) {
            result += noodles.poll();
        }

        System.out.println(result);

    }
}
