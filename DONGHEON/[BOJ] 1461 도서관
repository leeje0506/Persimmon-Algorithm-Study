package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

class boj_1461_도서관 {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine() , " ");
		
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		
		st = new StringTokenizer(br.readLine() , " ");
		
		PriorityQueue<Integer> pq1 = new PriorityQueue<>(Collections.reverseOrder());
		PriorityQueue<Integer> pq2 = new PriorityQueue<>(Collections.reverseOrder());
		
		for(int i = 0; i < N; i++) {
			int tem = Integer.parseInt(st.nextToken());
			
			if(tem < 0) {
				pq1.add(Math.abs(tem));
			}else {
				pq2.add(tem);				
			}
			
		}
		
		int result = 0;
		
		int maxRange = 0;
		
		if(pq1.isEmpty()) {
			maxRange = pq2.peek();
		}else if(pq2.isEmpty()) {
			maxRange = pq1.peek();			
		}else {
			maxRange = Math.max(pq1.peek(), pq2.peek());
		}
		result -= maxRange;
		
		while(!pq1.isEmpty()) {
			
			result += pq1.peek()*2;
			
			for(int i = 0; i < M; i++) {
				pq1.poll();
				if(pq1.isEmpty()) break;
			}
			
		}
		
		while(!pq2.isEmpty()) {
			
			result += pq2.peek()*2;
			
			for(int i = 0; i < M; i++) {
				pq2.poll();
				if(pq2.isEmpty()) break;
			}
			
		}
		
		System.out.println(result);

	}

}
